# Grammar for Ice
# http://www.jusot.com/ice/grammar/

# Start symbols for the grammar:
#       stmt is a single interactive statemnet;
#       stmts is a module or sequence of commands read from an input file;

%start program;

program
    : stmts
    ;

stmts
    : %empty
    | stmt stmts
    ;

stmt
    : decl_or_assign
    | class_decl
    | if_else
    | while_stmt
    | do_while_stmt
    | for_stmt
    | foreach_stmt
    | expr
    | RETURN expr
    | USING ident
    | CONTINUE
    | BREAK
    ;

decl_or_assign
    : AT ident decl_tail ':' expr
    | AT ident decl_tail '(' ')' ':' expr
    | AT ident decl_tail '(' ')' block
    | AT ident decl_tail '(' func_decl_args ')' ':' expr
    | AT ident decl_tail '(' func_decl_args ')' block
    | AT '.' ident decl_tail ':' expr
    ;

decl_tail
    : %empty
    | '.' ident decl_tail
    | '[' expr ']' decl_tail
    ;

block
    : '{' stmts '}'
    ;

func_decl_args
    : ident
    | ident ',' func_decl_args
    | ident ':' expr
    | ident ':' expr ',' func_decl_args
    ;

ident
    : IDENTIFIER
    ;

numeric
    : INTEGER
    | DOUBLE
    ;

boolean
    : TRUE
    | FALSE
    ;

string
    : STRING
    ;

expr
    : expr OR expr
    | expr AND expr
    | expr CEQ expr
    | expr CNE expr
    | expr CLT expr
    | expr CLE expr
    | expr CGT expr
    | expr CGE expr
    | expr BLS expr
    | expr BRS expr
    | expr '+' expr
    | expr '-' expr
    | expr '*' expr
    | expr '/' expr
    | expr '%' expr
    | term
    | '{' enumerators '}'
    | '{' dictionary '}'
    ;


term
    : ident_or_other
    | numeric
    | boolean
    | string
    | NOT term
    | '-' term
    | '(' expr ')'
    | lambda_expr
    | new_expr
    | match_expr
    | list_expr
    | NONE
    ;

ident_or_other
    : ident another_tail
    ;

another_tail
    : %empty
    | '.' ident another_tail
    | '(' call_args ')' another_tail
    | '[' expr ']' another_tail
    ;

call_args
    : %empty
    | expr call_args_tail
    ;

call_args_tail
    : %empty
    | ',' expr call_args_tail
    ;

if_else
    : IF expr block if_else_tail
    ;

if_else_tail
    : %empty
    | ELIF block if_else_tail
    | ELSE block
    ;

while_stmt
    : WHILE expr block
    ;

do_while_stmt
    : DO block WHILE expr
    ;

for_stmt
    : FOR expr TO expr AS ident block
    | FOR expr TO expr block
    ;

foreach_stmt
    : FOREACH expr AS ident block
    ;

lambda_expr
    : AT '(' ')' block decl_tail
    | AT '(' func_decl_args ')' block decl_tail
    ;

class_decl
    : ATAT ident '(' ')' block
    | ATAT ident '(' func_decl_args ')' block
    ;

new_expr
    : NEW ident '(' call_args ')'
    ;

enumerators
    : %empty
    | ident enumerators_rest
    ;

enumerators_rest
    : %empty
    | ',' enumerators
    ;

dictionary
    : expr ':' expr dictionary_rest
    ;

dictionary_rest
    : %empty
    | ',' dictionary
    ;

match_expr
    : MATCH expr '{' matches '}'
    | MATCH expr '{' matches '}' ELSE expr
    ;

matches
    : expr call_args_tail RET expr matches_rest
    ;

matches_rest
    : %empty
    | ',' matches
    ;

list_expr
    : '[' call_args ']'
    ;
