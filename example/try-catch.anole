Except: (@() {
    @conts: [];

    @throw(e) {
        if conts.empty() {
            println(e);
            exit();
        } else {
            @cont: conts.pop();
            cont(e);
        }
    }

    @catch(try, cfun) {
        @e: call_with_current_continuation(@(cont) {
            conts.push(cont);
            try(@(x): x)();
        });
        if !(e is none), cfun(e);
    }

    @try(fun): @(f): f(fun);

    return @() {};
})();

@throw: Except.throw;
prefixop throw;

@try: Except.try;
prefixop try;

@catch: Except.catch;
infixop catch;

@div(a, b) {
    if b = 0, throw "err: div 0";
    return a / b;
};

@div_forever(a) {
    @b: a;
    while true {
        div(a, b);
        b: b - 1;
    }
};

try @() {
    div_forever(100);
}
catch @(e) {
    println(e);
}
